#+title Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ~/.dotfiles/init.el

* TOC                                                                 :TOC_4:
- [[#philosophy][Philosophy]]
  - [[#literate-programming][Literate Programming]]
  - [[#inspiration][Inspiration]]
    - [[#lists][Lists]]
    - [[#reference-configs][Reference Configs]]
    - [[#blogs][Blogs]]
- [[#package-setup][Package Setup]]
  - [[#package][Package]]
  - [[#use-package][Use Package]]
- [[#evil][Evil]]
- [[#keybinds][Keybinds]]
  - [[#generalel][General.el]]
  - [[#globals][Globals]]
  - [[#leaders][Leaders]]
      - [[#buffers][Buffers]]
  - [[#which-key][Which Key]]
  - [[#hydra][Hydra]]
- [[#ui][UI]]
  - [[#startup][Startup]]
  - [[#font][Font]]
  - [[#icons][Icons]]
  - [[#doom-themes][Doom Themes]]
  - [[#window-decorations][Window Decorations]]
  - [[#alerts][Alerts]]
  - [[#line-numbers][Line Numbers]]
  - [[#parentheses][Parentheses]]
  - [[#mac-settings][Mac Settings]]
  - [[#tabs][Tabs]]
  - [[#doom-modeline][Doom Modeline]]
  - [[#writeroom][Writeroom]]
- [[#info][Info]]
  - [[#ivy][Ivy]]
    - [[#counsel][Counsel]]
    - [[#ivy-rich][Ivy Rich]]
    - [[#keybinds-1][Keybinds]]
  - [[#helpful][Helpful]]
- [[#org][Org]]
  - [[#package-config][Package Config]]
  - [[#stars][Stars]]
  - [[#org-babel][Org Babel]]
    - [[#languages][Languages]]
    - [[#source-block-templates][Source Block Templates]]
    - [[#auto-tangle-config-file][Auto Tangle Config File]]
    - [[#keybinds-2][Keybinds]]
  - [[#org-roam][Org Roam]]
    - [[#package-config-1][Package Config]]
    - [[#keybinds-3][Keybinds]]
  - [[#org-capture][Org Capture]]
  - [[#toc][TOC]]
  - [[#jira][Jira]]
  - [[#keybinds-4][Keybinds]]
- [[#development][Development]]
  - [[#bash][Bash]]
  - [[#elisp][Elisp]]
  - [[#java][Java]]
  - [[#python][Python]]

* Philosophy

** Literate Programming

   http://www.howardism.org/Technical/Emacs/literate-programming-tutorial.html


** Inspiration

*** Lists

    https://githublists.com/lists/emacs-tw/awesome-emacs


*** Reference Configs

    https://github.com/daviwil/dotfiles/blob/master/Emacs.org
    https://github.com/mwfogleman/.emacs.d/blob/master/michael.org
    https://zzamboni.org/post/my-emacs-configuration-with-commentary/


*** Blogs

    https://planet.emacslife.com/
    https://oremacs.com/
    

* Package Setup

** Package

   #+begin_src emacs-lisp

     (require 'package)

     (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                              ("org"   . "https://orgmode.org/elpa/")
                              ("elpa"  . "https://elpa.gnu.org/packages/")))

     (package-initialize)

     (unless package-archive-contents
       (package-refresh-contents))

   #+end_src


** Use Package

   https://github.com/jwiegley/use-package

   #+begin_src emacs-lisp

     ;; Initialize use-package on non-Linux platforms
     (unless (package-installed-p 'use-package)
       (package-install 'use-package))

     (require 'use-package)

     (setq use-package-always-ensure t) ; don't confirm package installs

   #+end_src


* Evil

  #+begin_src emacs-lisp

    ;; needed for evil undo. There's a built-in in emacs 28 I should check out
    (use-package undo-tree
      :init
      (global-undo-tree-mode 1))

    ;; https://evil.readthedocs.io/en/latest/settings.html
    (use-package evil
      :ensure t
      :init
      (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
      (setq evil-want-keybinding nil)
      (setq evil-undo-system 'undo-tree)
      (setq evil-want-C-u-scroll t)
      (setq evil-escape-key-sequence "kj")
      (setq evil-escape-delay 0.2)
      (setq evil-auto-indent nil)
      :config
      (evil-mode 1)
      ;; Use visual line motions even outside of visual-line-mode buffers
      (evil-global-set-key 'motion "j" 'evil-next-visual-line)
      (evil-global-set-key 'motion "k" 'evil-previous-visual-line))

    ;; https://github.com/emacs-evil/evil-collection
    (use-package evil-collection
      :after evil
      :ensure t
      :config
      (evil-collection-init))

    ;; https://github.com/syl20bnr/evil-escape
    (use-package evil-escape
      :after evil
      :ensure t
      :init
      (setq-default evil-escape-key-sequence "kj")
      (setq-default evil-escape-delay 0.2))
    :config
    (evil-escape-mode 1)

  #+end_src


* Keybinds

** General.el

   https://github.com/noctuid/general.el

   #+begin_src emacs-lisp

     (use-package general
       :config
       (general-create-definer cxr/leader-keys
         :keymaps '(normal insert visual emacs)
         :prefix "SPC"
         :global-prefix "C-SPC")
       (general-auto-unbind-keys))

   #+end_src


** Globals

   #+begin_src emacs-lisp

     ;; Make ESC quit prompts
     (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

   #+end_src


** Leaders

**** Buffers

     #+begin_src emacs-lisp

       (cxr/leader-keys
         "b"   '(:ignore t :which-key "buffers")
         "bb"  '(counsel-switch-buffer              :which-key "switch buffer")
         "TAB" '(evil-switch-to-windows-last-buffer :which-key "switch to last buffer"))

     #+end_src


** Which Key
   #+begin_src emacs-lisp
     (use-package which-key
       :init (which-key-mode)
       :diminish which-key-mode
       :config
       (setq which-key-idle-delay 0.3))
   #+end_src


** Hydra

   https://github.com/abo-abo/hydra
   

* UI

** Startup

   #+begin_src emacs-lisp

     ;; Don't show the splash screen
     (setq inhibit-startup-message t)

     ;; Start emacs window maximised
     ;; the t parameter apends to the hook, instead of prepending
     ;; this means it'd be run after other hooks that might fiddle
     ;; with the frame size
     ;; https://emacsredux.com/blog/2020/12/04/maximize-the-emacs-frame-on-startup/
     (add-hook 'window-setup-hook 'toggle-frame-maximized t)

   #+end_src


** Font

   #+begin_src emacs-lisp

     ;; default
     (set-face-attribute 'default nil :font "Hack" :height 160)

     ;; Larry (old work macbook)
     (when (equal system-name "Larry") 
       (set-face-attribute 'default nil :font "Hack" :height 140))

   #+end_src


** Icons

   Run ~M-x all-the-icons-install-fonts~ after first setup to install icon fonts

   #+begin_src emacs-lisp

     (use-package all-the-icons)

   #+end_src


** Doom Themes

   #+begin_src emacs-lisp

     (use-package doom-themes
       :ensure t
       :config
       ;; Global settings (defaults)
       (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
             doom-themes-enable-italic t) ; if nil, italics is universally disabled
       (load-theme 'doom-palenight t)
       ;;(load-theme 'doom-outrun-electric t)

       ;; Enable flashing mode-line on errors
       (doom-themes-visual-bell-config)
       ;; Enable custom neotree theme (all-the-icons must be installed!)
       ;; (doom-themes-neotree-config)
       ;; or for treemacs users
       ;; (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
       ;; (doom-themes-treemacs-config)
       ;; Corrects (and improves) org-mode's native fontification.
       (doom-themes-org-config))

   #+end_src

  
** Window Decorations

   #+begin_src emacs-lisp

     (tool-bar-mode -1)      ; Disable the chunky toolbar
     (tooltip-mode -1)       ; Disable tooltips
     (menu-bar-mode -1)      ; Disable the top menu bar

     ;; these don't seem to work in terminal mode
     (scroll-bar-mode -1)    ; Disable visible scrollbar
     (set-fringe-mode 0)     ; Add left and right margins. Handled by writeroom now

   #+end_src


** Alerts

   #+begin_src emacs-lisp

     (setq visible-bell t)    ; Stop beeping at me!

   #+end_src


** Line Numbers

   #+begin_src emacs-lisp

     (column-number-mode t) ; Show column number in mode line

     (global-display-line-numbers-mode 0)

   #+end_src


** Parentheses

   #+begin_src emacs-lisp

     (use-package rainbow-delimiters
       :hook
       (prog-mode . rainbow-delimiters-mode))

     ;;(use-package prism) ; not sure if I like this one

   #+end_src


** Mac Settings

   https://medium.com/really-learn-programming/configuring-emacs-on-macos-a6c5a0a8b9fa

   #+begin_src emacs-lisp

     ;; use this to print all monitor attributes
     ;; (display-monitor-attributes-list)

     ;;  ;; macbook screen
     ;; (((geometry 0 0 1792 1120)
     ;;   (workarea 0 25 1792 1095)
     ;;   (mm-size 344 214)
     ;;   (frames)
     ;;   (source . "NS"))

     ;;  ;; top monitor
     ;;  ((geometry 769 -1080 1920 1080)
     ;;   (workarea 769 -1080 1920 1055)
     ;;   (mm-size 524 294)
     ;;   (frames #<frame config.org 0x7fb11082ee30>)
     ;;   (source . "NS"))

     ;;  ;; main monitor
     ;;  ((geometry 1792 0 2560 1440)
     ;;   (workarea 1792 0 2560 1415)
     ;;   (mm-size 596 335)
     ;;   (frames)
     ;;   (source . "NS")))

     ;; use this for testing frame position
     ;;(modify-frame-parameters (make-frame) '((top . 100) (left . 1900)))

     (when (equal system-type 'darwin)

       ;; open on top monitor
       ;; (setq default-frame-alist
       ;; 	'((top + -769) (left + 1080)))
       ;; (setq initial-frame-alist
       ;; 	'((top + -769) (left + 1080))))

       ;; open on main monitor
       (setq default-frame-alist
             '((top . 100) (left . 1900) (width . 200) (height . 450)))
       (setq initial-frame-alist
             '((top . 100) (left . 1900) (width . 200) (height . 450))))

     ;; Open on main monitor
     ;;(setq default-frame-alist
     ;;'((top + 100) (left + 1900)))
     ;;(setq initial-frame-alist
     ;;'((top + 100) (left + 1900))))

     ;; swaps cmd and alt. Should only need if using macbook keyboard
     ;;(setq mac-command-modifier 'meta)
     ;;(setq mac-option-modifier 'super)


     ;;(add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
     ;;(add-to-list 'default-frame-alist '(ns-appearance . dark)))

     ;;(when (member "Fira Code" (font-family-list))
     ;;(add-to-list 'initial-frame-alist '(font . "Fira Code-14"))
     ;;(add-to-list 'default-frame-alist '(font . "Fira Code-14")))
     ;;(set-fontset-font t 'symbol (font-spec :family "Apple Symbols") nil 'prepend)
     ;;(set-fontset-font t 'symbol (font-spec :family "Apple Color Emoji") nil 'prepend))

   #+end_src
   

** Tabs

   #+begin_src emacs-lisp

     (setq-default tab-width 2)
     (setq-default evil-shift-width tab-width)
     (setq-default indent-tabs-mode nil)

   #+end_src


** Doom Modeline

   https://github.com/seagle0128/doom-modeline

   #+begin_src emacs-lisp

     (use-package doom-modeline
       :ensure t
       :init
       (doom-modeline-mode 1)
       :custom
       (doom-modeline-height 5))

     (set-face-attribute 'mode-line nil :family "Hack" :height 130)

   #+end_src
  

** Writeroom

   https://github.com/joostkremers/writeroom-mode

   I'm using this to center the text in org mode buffers.
   It's very feautre-rich though, and I've disabled most of the functionality.
   Maybe I should use something simpler?

   #+begin_src emacs-lisp

     (use-package writeroom-mode
       :init
       (setq writeroom-width 0.6) ; % of window width
       (setq writeroom-maximize-window 0)
       (setq writeroom-mode-line t)
       (setq writeroom-header-line t)
       (setq writeroom-fullscreen-effect 'maximized)
       (setq writeroom-major-modes '(org-mode text-mode))
       :config
       (global-writeroom-mode t))

   #+end_src


  
* Info

** Ivy

   https://oremacs.com/swiper/
   
*** Counsel

    #+begin_src emacs-lisp

      (use-package counsel
        :diminish
        :bind (("M-x"     . counsel-M-x)
               ("C-x b"   . counsel-ibuffer)
               ("C-x C-f" . counsel-find-file)
               :map minibuffer-local-map
               ("C-s" . swiper)
               ("C-r" . 'counsel-minibuffer-history)
               :map ivy-minibuffer-map
               ("TAB" . ivy-alt-done)	
               ("C-l" . ivy-alt-done)
               ("C-j" . ivy-next-line)
               ("C-k" . ivy-previous-line)
               :map ivy-switch-buffer-map
               ("C-k" . ivy-previous-line)
               ("C-l" . ivy-done)
               ("C-d" . ivy-switch-buffer-kill)
               :map ivy-reverse-i-search-map
               ("C-k" . ivy-previous-line)
               ("C-d" . ivy-reverse-i-search-kill))
        :config
        (ivy-mode 1))

    #+end_src


*** Ivy Rich

    #+begin_src emacs-lisp

      ;; https://github.com/Yevgnen/ivy-rich
      (use-package ivy-rich
        :init (ivy-rich-mode 1)
        :config
        (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line))

    #+end_src


*** Keybinds

    #+begin_src emacs-lisp

      (global-set-key (kbd "C-M-j") 'counsel-switch-buffer)

    #+end_src


** Helpful

   https://github.com/Wilfred/helpful

   #+begin_src emacs-lisp

     (use-package helpful
       :custom
       (counsel-describe-function-function #'helpful-callable)
       (counsel-describe-variable-function #'helpful-variable)
       (counsel-describe-symbol-function   #'helpful-symbol)
       :bind
       ([remap describe-function] . counsel-describe-function)
       ([remap describe-command]  . helpful-command)
       ([remap describe-symbol]   . helpful-symbol)
       ([remap describe-variable] . counsel-describe-variable)
       ([remap describe-key]      . helpful-key))

   #+end_src


* Org

  https://orgmode.org/manual/index.html
  https://orgmode.org/worg/

** Package Config

   #+begin_src emacs-lisp

     (use-package org
       :init
       (setq org-startup-folded t)
       :config
       (setq org-ellipsis " ▾"
             org-hide-emphasis-markers t)
       (org-indent-mode 1))

   #+end_src


** Stars
   https://github.com/integral-dw/org-superstar-mode
   #+begin_src emacs-lisp
     (use-package org-superstar
       :after org
       :hook
       (org-mode . org-superstar-mode))

   #+end_src
 


** Org Babel

   https://orgmode.org/manual/Working-with-Source-Code.html
   https://orgmode.org/manual/Extracting-Source-Code.html

   http://eschulte.github.io/org-scraps/

*** Languages

    #+begin_src emacs-lisp

      (org-babel-do-load-languages
       'org-babel-load-languages
       '((emacs-lisp . t)
         (java       . t)
         (python     . t)
         (shell      . t)))

      (setq org-confirm-babel-evaluate nil)

    #+end_src


*** Source Block Templates

    #+begin_src emacs-lisp

      (require 'org-tempo)

      (add-to-list 'org-structure-template-alist '("p"  . "src python :python python3"))
      (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))

    #+end_src

    
*** Auto Tangle Config File

    Automatically tangle ~config.org~ whenever it is saved.

    #+begin_src emacs-lisp

      (defun cxr/org-babel-tangle-config ()
        (when (string-equal (buffer-file-name)
                            (expand-file-name "~/.dotfiles/config.org"))

          ;; Dynamic scoping to the rescue
          (let ((org-confirm-babel-evaluate nil))
            (org-babel-tangle))))

      (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'cxr/org-babel-tangle-config)))

    #+end_src
  

*** Keybinds

    #+begin_src emacs-lisp

      (cxr/leader-keys
        "ob"  '(:ignore t                   :which-key "babel")
        "obe" '(org-babel-execute-src-block :which-key "execute block")
        "obt" '(org-babel-tangle            :which-key "tangle"))

    #+end_src


** Org Roam

   https://www.orgroam.com/manual.html

   https://takeonrules.com/2021/08/22/ever-further-refinements-of-org-roam-usage/
   https://takeonrules.com/2021/08/23/diving-into-the-implementation-of-subject-menus-for-org-roam/

*** Package Config

    #+begin_src emacs-lisp

      (use-package org-roam
        :init
        (setq org-roam-v2-ack t) ; don't warn me about v2 migration
        :custom
        (org-roam-directory "~/org/roam")
        :config
        (org-roam-db-autosync-mode t))

    #+end_src

*** Keybinds

    #+begin_src emacs-lisp
      ;; org-roam leader keys
      (cxr/leader-keys
        "or"  '(:ignore t            :which-key "roam")
        "orc" '(org-roam-capture     :which-key "capture")
        "orf" '(org-roam-node-find   :which-key "find node")
        "ori" '(org-roam-node-insert :which-key "insert node"))

    #+end_src




** Org Capture

   https://github.com/progfolio/doct

** TOC

   https://github.com/snosov1/toc-org

   #+begin_src emacs-lisp

     (use-package toc-org
       :hook
       (org-mode     . toc-org-mode)
       (makdown-mode . toc-org-mode))
       ;; :config
       ;; (define-key markdown-mode-map (kbd "\C-c\C-o") 'toc-org-markdown-follow-thing-at-point))

   #+end_src


** Jira

   https://github.com/ahungry/org-jira
   

** Keybinds

   #+begin_src emacs-lisp

     (cxr/leader-keys
       "o"     '(:ignore t :which-key "org")
       "oo"    '(org-open-at-point :which-key "open")
       "oR"    '(org-mode-restart  :which-key "restart"))

   #+end_src


* Development

  https://emacs-lsp.github.io/lsp-mode/

** Bash

   https://github.com/bash-lsp/bash-language-server
   

** Elisp

   https://github.com/chrisdone/elisp-guide


** Java

   https://projects.eclipse.org/projects/eclipse.jdt.ls

** Python

   2 Microsoft Python language servers?
   https://github.com/microsoft/pyright
   https://github.com/Microsoft/python-language-server

   https://jedi.readthedocs.io/en/latest/
   https://github.com/palantir/python-language-server#readme
